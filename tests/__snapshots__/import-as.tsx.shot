// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should not add sourcemap to import-as.tsx if NODE_ENV === 'production' 1`] = `

File: import-as.tsx
TypeScript before transform:
  import 'somepolyfill'
  import { default as emotion } from 'react-emotion'
  import React from 'react'
  import ReactDOM from 'react-dom'
  
  interface Props {
    backgroundColor: string
  }
  
  const Wrapper = emotion('div')(
    {
      color: 'red',
    },
    (props: Props) => ({
      backgroundColor: props.backgroundColor,
    }),
  )
  
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (
        <Wrapper backgroundColor="blue">
          <span>hello</span>
        </Wrapper>
      )
    }
  }
  
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'))
  


      ↓ ↓ ↓ ↓ ↓ ↓

TypeScript after transform:
  import 'somepolyfill';
  import { default as emotion } from 'react-emotion';
  import React from 'react';
  import ReactDOM from 'react-dom';
  interface Props {
    backgroundColor: string;
  }
  const Wrapper = /*#__PURE__*/ emotion('div')({
    color: 'red',
  }, (props: Props) => ({
    backgroundColor: props.backgroundColor,
  }), "label:Wrapper;");
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (<Wrapper backgroundColor="blue">
      <span>hello</span>
    </Wrapper>);
    }
  }
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'));
  

`;

exports[`should transform import-as.tsx with autoLabel false 1`] = `

File: import-as.tsx
TypeScript before transform:
  import 'somepolyfill'
  import { default as emotion } from 'react-emotion'
  import React from 'react'
  import ReactDOM from 'react-dom'
  
  interface Props {
    backgroundColor: string
  }
  
  const Wrapper = emotion('div')(
    {
      color: 'red',
    },
    (props: Props) => ({
      backgroundColor: props.backgroundColor,
    }),
  )
  
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (
        <Wrapper backgroundColor="blue">
          <span>hello</span>
        </Wrapper>
      )
    }
  }
  
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'))
  


      ↓ ↓ ↓ ↓ ↓ ↓

TypeScript after transform:
  import 'somepolyfill';
  import { default as emotion } from 'react-emotion';
  import React from 'react';
  import ReactDOM from 'react-dom';
  interface Props {
    backgroundColor: string;
  }
  const Wrapper = /*#__PURE__*/ emotion('div')({
    color: 'red',
  }, (props: Props) => ({
    backgroundColor: props.backgroundColor,
  }), "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcG9ydC1hcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU2dCIiwiZmlsZSI6ImltcG9ydC1hcy50c3giLCJzb3VyY2VSb290IjoidGVzdHMvZml4dHVyZXMifQ== */");
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (<Wrapper backgroundColor="blue">
      <span>hello</span>
    </Wrapper>);
    }
  }
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'));
  

`;

exports[`should transform import-as.tsx with default configs 1`] = `

File: import-as.tsx
TypeScript before transform:
  import 'somepolyfill'
  import { default as emotion } from 'react-emotion'
  import React from 'react'
  import ReactDOM from 'react-dom'
  
  interface Props {
    backgroundColor: string
  }
  
  const Wrapper = emotion('div')(
    {
      color: 'red',
    },
    (props: Props) => ({
      backgroundColor: props.backgroundColor,
    }),
  )
  
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (
        <Wrapper backgroundColor="blue">
          <span>hello</span>
        </Wrapper>
      )
    }
  }
  
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'))
  


      ↓ ↓ ↓ ↓ ↓ ↓

TypeScript after transform:
  import 'somepolyfill';
  import { default as emotion } from 'react-emotion';
  import React from 'react';
  import ReactDOM from 'react-dom';
  interface Props {
    backgroundColor: string;
  }
  const Wrapper = /*#__PURE__*/ emotion('div')({
    color: 'red',
  }, (props: Props) => ({
    backgroundColor: props.backgroundColor,
  }), "label:Wrapper;", "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcG9ydC1hcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU2dCIiwiZmlsZSI6ImltcG9ydC1hcy50c3giLCJzb3VyY2VSb290IjoidGVzdHMvZml4dHVyZXMifQ== */");
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (<Wrapper backgroundColor="blue">
      <span>hello</span>
    </Wrapper>);
    }
  }
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'));
  

`;

exports[`should transform import-as.tsx with sourcemap false 1`] = `

File: import-as.tsx
TypeScript before transform:
  import 'somepolyfill'
  import { default as emotion } from 'react-emotion'
  import React from 'react'
  import ReactDOM from 'react-dom'
  
  interface Props {
    backgroundColor: string
  }
  
  const Wrapper = emotion('div')(
    {
      color: 'red',
    },
    (props: Props) => ({
      backgroundColor: props.backgroundColor,
    }),
  )
  
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (
        <Wrapper backgroundColor="blue">
          <span>hello</span>
        </Wrapper>
      )
    }
  }
  
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'))
  


      ↓ ↓ ↓ ↓ ↓ ↓

TypeScript after transform:
  import 'somepolyfill';
  import { default as emotion } from 'react-emotion';
  import React from 'react';
  import ReactDOM from 'react-dom';
  interface Props {
    backgroundColor: string;
  }
  const Wrapper = /*#__PURE__*/ emotion('div')({
    color: 'red',
  }, (props: Props) => ({
    backgroundColor: props.backgroundColor,
  }), "label:Wrapper;");
  export class SimpleComponent extends React.PureComponent {
    render() {
      return (<Wrapper backgroundColor="blue">
      <span>hello</span>
    </Wrapper>);
    }
  }
  ReactDOM.render(<SimpleComponent />, document.querySelector('#app'));
  

`;
